*CHAPTER ZERO: What you need to know*
----------------------------------------------------------------------------------------------------
	How people access the web
----------------------------------------------------------------------------------------------------

- Web servers: are special computers that are constantly connected to the Internet, and are optimized to send web pages 
  out to people who request them
- Devices: People are accessing websites on an increasing range of devices including desktop computers, laptops,       tablets, and mobile phones. It is important to remember that various devices have different screen sizes and some have   faster connections to the web than others.
- Screen readers: Screen readers are programs that read out the contents of a computer screen to a user. They are   commonly used by people with visual impairments. In the same way that many countries have legislations that require   public buildings to be accessible to those with disabilities, many laws have also been passed that require websites be   accessible to those with disabilities.
- Browsers: Browsers People access websites using software called a web browser. Popular examples include Firefox,   Internet Explorer, Safari, Chrome, and Opera.In order to view a web page, users might type a web address into their     browser, follow a link from another site, or use a bookmark.Software manufacturers regularly release new versions of     browsers with new features and supporting new additions to languages. It is important, however, to remember that many    computer owners will not be running the latest versions of these browsers. Therefore you cannot rely on all visitors     to your site being able to use the latest functionality offered in all browsers.

----------------------------------------------------------------------------------------------------
	How websites are created
----------------------------------------------------------------------------------------------------

- What you see: When you are looking at a website, it is most likely that your browser will be receiving HTML and CSS from the webserver that hosts the site. The web browser interprets the HTML and CSS code to create the page that you see.

----------------------------------------------------------------------------------------------------
	How the web works
---------------------------------------------------------------------------------------------------- 

- When you visit a website, the web server hosting that site could be anywhere in the world. In order for you to find the location of the web server, your browser will first connect to a Domain Name System (DNS) server.. It is the DNS servers that tell your browser how to find the website

- When you connect to the web, you do so via an Internet Service Provider (ISP). You type a domain name or web address 
into your browser to visit a site
Your computer contacts a network of servers called Domain Name System (DNS) servers. These act like phone books; they tell your computer the IP address associated with the requested domain name. An IP address is a number of up to 12 digits separated by periods / full stops. Every device connected to the web has a unique IP address; it is like the phone number for that computer
The unique number that the DNS server returns to your computer allows your browser to contact the web server that hosts the website you requested. 


*CHAPTER ONE: Structure*
----------------------------------------------------------------------------------------------------
	How pages use structure 
----------------------------------------------------------------------------------------------------

- The HTML code is made up of characters that live inside angled brackets — these are called HTML elements. Elements are usually made up of two tags: an opening tag and a closing tag. (The closing tag has an extra forward slash in it.) Each HTML element tells the browser something about the information that sits between its opening and closing tags.

- The opening <html> tag indicates that anything between it and a closing </html> tag is HTML code
- The <body> tag indicates that anything between it and the closing </body> tag should be shown inside the main browser   window.

- Attributes provide additional information about the contents of an element. They appear on the opening tag of the element and are made up of two parts: a name and a value, separated by an equals sign.
- The attribute name indicates what kind of extra information you are supplying about the element's content. It should be written in lowercase.
- The value is the information or setting for the attribute. It should be placed in double quotes. Different attributes can have different values.


*CHAPTER TWO: Text*
----------------------------------------------------------------------------------------------------
	 structural markup
----------------------------------------------------------------------------------------------------

- <sup>: The <sup> element is used to contain characters that should be superscript such as the suffixes of dates or mathematical concepts like raising a number to a power such as 22.
- <hr />: To create a break between themes — such as a change of topic in a book or a new scene in a play — you can add a horizontal rule between sections using the <hr /> tag. There are a few elements that do not have any words between 
an opening and closing tag. They are known as empty elementsand they are written differently.

----------------------------------------------------------------------------------------------------
	 semantic markup
----------------------------------------------------------------------------------------------------

- There are some text elements that are not intended to affect the structure of your web pages, but they do add extra information to the pages — they are known as semantic markup.
- <strong>: The use of the <strong> element indicates that its content has strong importance. For example, the words 
contained in this element might be said with strong emphasis.
- <blockquote>: The <blockquote> element is used for longer quotes that take up an entire paragraph. Note how the <p> element is still used inside the <blockquote> element. 
- <abbr>: If you use an abbreviation or an acronym, then the <abbr> element can be used. A titleattribute on the opening tag is used to specify the full term
- <cite>: When you are referencing a piece of work such as a book, film or research paper, the <cite> element can be used to indicate where the citation is from.
- <dfn>: The first time you explain some new terminology (perhaps an academic concept or some jargon) in a document, it is known as the defining instance of it.The <dfn> element is used to indicate the defining instance of a new term
- <address>: The <address> element has quite a specific use: to contain contact details for the author of the page.
It can contain a physical address, but it does not have to. For example, it may also contain a phone number or email address.
- <ins>|<del>: The <ins> element can be used to show content that has been inserted into a document, while the <del> element can show text that has been deleted from it.
- <s>: The <s> element indicates something that is no longer accurate or relevant (but that should not be deleted).

** Structural markup includes elements such as <h1>, <h2>, and <p>. Semantic information is carried in elements such as <cite> and <em>. **


*CHAPTER THREE: Lists*
----------------------------------------------------------------------------------------------------
	 Introduction
----------------------------------------------------------------------------------------------------

● Ordered lists are lists where each item in the list is 
numbered. For example, the list might be a set of steps for 
a recipe that must be performed in order, or a legal contract 
where each point needs to be identified by a section 
number.
● Unordered lists are lists that begin with a bullet point 
(rather than characters that indicate order).
● Definition lists are made up of a set of terms along with the 
definitions for each of those terms.


- <ol>: The ordered list is created with the <ol> element.
- <li>: Each item in the list is placed between an opening <li> tag and a closing </li> tag. (The listands for list item.)
- <ul>: The unordered list is created with the <ul> element.

- <dl>: The definition list is created with the <dl> element and usually consists of a series of terms and their definitions.
- <dt>: This is used to contain the term being defined (the definition term).
- <dd>: This is used to contain the definition.


*CHAPTER FOUR: Links*
----------------------------------------------------------------------------------------------------
	 Introduction
----------------------------------------------------------------------------------------------------

- Links are created using the <a> element. Users can click on anything between the opening <a> tag and the closing </a> tag. You specify which page you want to link to using the href attribute.
- When you link to a different website, the value of the hrefattribute will be the full web address for the site, which is known as an absolute URL.
- absolute url: URL stands for Uniform Resource Locator. Every web page has its own URL. This is the web address that you would type into a browser if you wanted to visit that specific page.
- Relative URL: When linking to other pages within the same site, you can use relative URLs. These are like 
a shorthand version of absolute URLs because you do not need to specify the domain name.
- mailto: To create a link that starts up the user's email program and addresses an email to a specified email address, you use the <a> element. However, this time the value of the href attribute starts with mailto: and is followed by the email address you want the email to be sent to.
- target: If you want a link to open in a new window, you can use the target attribute on the opening <a> tag. The value of this attribute should be _blank.


*CHAPTER FIVE: Images*
----------------------------------------------------------------------------------------------------
	 Introduction
--------------------------------
- <img>: To add an image into the page you need to use an <img> element. This is an empty element (which means there is 
no closing tag). It must carry the following two attributes:
- src: This tells the browser where it can find the image file. This will usually be a relative URL pointing to an image on your own site.
- alt: This provides a text description of the image which describes the image if you cannot see it.
- title: You can also use the titleattribute with the <img> element to provide additional information about the image. Most browsers will display the content of this attribute in a tootip when the user hovers over the image

- If the image is just to make a page look more attractive (and it has no meaning, such as a graphic dividing line), then the alt attribute should still be used but the quotes should be left empty

- save images in the right format
  save images in the right size
  save images in the right resolution

- Whenever you have many different colors in a picture you should use a JPEG. 
- Use GIF or PNG format when saving images with few colors or large areas of the same color.

- JPGs, GIFs, and PNGs belong to a type of image format known as bitmap. They are made up of lots of miniature squares. The resolution of an image is the number of squares that fit within a 1 inch x 1 inch square area.
- Due to the fact that computer displays are capped at a resolution of 72 ppi, using images on the web with a higher 
resolution will not result in better image quality — only in larger file sizes, which will increase the time needed to load them and therefore slow down viewing of your web pages

- <figure>: Images often come with captions. You can have more than one image inside the <figure>element as long as they all share the same caption.
- <figcaption>: has been added to HTML5 in order to allow web page authors to add a caption to an image.


*CHAPTER SIX: Table*
----------------------------------------------------------------------------------------------------
	 Introduction
----------------------------------------------------------------------------------------------------

- <table>: The <table> element is used to create a table. The contents of the table are written out row by row.
<tr>: You indicate the start of each row using the opening <tr> tag. (The tr stands for table row.) It is followed by one or more <td> elements (one for each cell in that row).
- <td>: Each cell of a table is represented using a <td>element. (The td stands for table data.)

<th>: The <th> element is used just like the <td> element but its purpose is to represent the heading for either acolumn or a row. (The th stands for table heading.) 
- Even if a cell has no content, you should still use a <td> or <th> element to represent the presence of an empty cell otherwise the table will not render correctly. 
- You can use the scope attribute on the <th> element to indicate whether it is a heading for a column or a row. It can take the values: row to indicate a heading for a row or col to indicate a heading for a column.

- The colspan attribute can be used on a <th> or <td> element and indicates how many columns that cell should run across
- The rowspan attribute can be used on a <th> or <td> element to indicate how many rows a cell should span down the table.

- There are three elements that help distinguish between the main content of the table and the first and last rows (which can contain different content).
- <thead>: The headings of the table should sit inside the <thead> element. 
- <tbody>: The body should sit inside the <tbody> element. 
- <tfoot>: The footer belongs inside the <tfoot> element


*CHAPTER SEVEN: Forms*
----------------------------------------------------------------------------------------------------
	 How forms work
----------------------------------------------------------------------------------------------------

- forms deal with collecting information from the users

- A user fills in a form and then presses a button to submit the information to the server.
- The name of each form control is sent to the server along with the value the user enters or selects
- The server processes the information using a programming language such as PHP, C#, VB.net, or Java. It may also store the information in a database
- The server creates a new page to send back to the browser based on the information received

- To differentiate between various pieces of inputted data, information is sent from the browser to the server using name/value pairs.

****You should never change the name of a form control in a page unless you know that the code on the server will understand this new value**

- <form>: Form controls live inside a <form> element. This element should always carry the actionattribute and will usually have a method and id attribute too.
- action: Every <form> element requires an action attribute. Its valueis the URL for the page on the server that will receive the information in the form when it is submitted
- method: Forms can be sent using one of two methods: get or post. With the get method, the values from the form are added to the end of the URL specified in the action attribute. The getmethod is ideal for:
● short forms (such as search boxes)
● when you are just retrieving data from the web server (not sending information that should be added to or deleted from a database
- With the post method the values are sent in what are known as HTTP headers. As a rule of thumb you should use the 
post method if your form:
● allows users to upload a file
● is very long
● contains sensitive data (e.g. passwords)
● adds information to, or deletes information from, a databaseIf the method attribute is not used, the form data will be sent using the get method.

- <input>: The <input> element is used to create several different form controls. The value of the typeattribute determines what kind of input they will be creating.
- type="text": When the type attribute has a value of text, it creates a singleline text input
- name: The value of this attribute identifies the form control and is sent along with the information they enter to the server.
- maxlength: You can use the maxlengthattribute to limit the number of characters a user may enter into the text field.
- type="password": displays same as 'text' but the values are blocked out
- <textarea>: The <textarea> element is used to create a mutli-line text input.
- type="radio": Radio buttons allow users to pick just one of a number of options.
- value: The value attribute indicates the value that is sent to the se
rver for the selected option. The value of each of the buttons in a group should be different (so that the server knows which option the user has selected).

***Once a radio button has been selected it cannot be deselected, if you want that option USE A CHECKBOX INSTEAD***

- <input>type="checkbox": Checkboxes allow users to select (and unselect) one or more options in answer to a question

- <select>: A drop down list box (also known as a select box) allows users to select one option from a drop down list. The <select> element is used to create a drop down list box. It contains two or more <option>elements. 
- <option>: The <option> element is used to specify the options that the user can select from. The words between the opening <option> and closing </option> tags will be shown to the user in the drop down box
- selected: The selected attribute can be used to indicate the option that should be selected when the page loads.

***If users need to see all options at a glance, radio buttons are better suited.
   If there is a very long list of options (such as a list of countries), drop down list boxes work better.***

- size: You can turn a drop down select box into a box that shows more than one option by adding the size attribute. Its value should be the number of options you want to show at once.
- multiple: You can allow users to select multiple options from this list by adding the multiple attribute with a value of multiple. 
- type="file": This type of input creates a box that looks like a text input followed by a browse button. 

- type="submit": The submit button is used to send a form to the server

- type="image": If you want to use an image for the submit button, you can give the type attribute a value of image. The src, width, height, and alt attributes work just like they do when used with the <img> element

- type="hidden": This example also shows a hidden form control. These form controls are not shown on the page 
They allow web page authors to add values to forms that users cannot see. 

- <label>: each form control should have its own <label> element as this makes the form accessible to vision-impaired users.The <label> element can be used in two ways. It can:
1. Wrap around both the text description and the form input.
2. Be kept separate from the form control and use the forattribute to indicate which form control it is a label for. 

-<fieldset>: You can group related form controls together inside the <fieldset> element. This is particularly helpful for longer forms.
- <legend>: The <legend> element can come directly after the opening <fieldset> tag and contains a caption which helps identify the purpose of that group of form controls.
- required='required' used in a form input to show which fields are required

- type="date": If you are asking the user for a date, you can use an <input>element and give the type attribute a value of date. 
- type="email": Browsers that support HTML5 validation will check that the user has provided information in the correct format of an email address
- type="url": A URL input can be used when you are asking a user for a web page address.

- type="search"
- placeholder: On any text input, you can also use an attribute called placeholder whose value is text that will be shown in the text box until the user clicks in that area. 


*CHAPTER EIGHT: Extra markup*
----------------------------------------------------------------------------------------------------
	 intro
----------------------------------------------------------------------------------------------------

- each web page should begin with a DOCTYPE declaration to tell a browser which version of HTML the page is using (although browsers usually display the page even if it is not included). 

- <!-- -->: If you want to add a comment to your code that will not be visible in the user's browser, you can add the text between these characters

- Every HTML element can carry the id attribute. It is used to uniquely identify that element from other elements on the 
page. Its value should start with a letter or an underscore (not a number or any other character).It is important that no two elements on the same page have the same value for their idattributes (otherwise the value is no longer unique).
- 'class' attribute can be used to group together various sections of your code that have the same use eg. you might want to differentiate between links that point to other pages on your own site and links that point to external sites. 
If you would like to indicate that an element belongs to several classes, you can separate class names with a space,

- Some elements will always appear to start on a new line in the browser window. These are known as block level elements. Examples of block elements are <h1>, <p>, <ul>, and <li>.
- Some elements will always appear to continue on the same line as their neighbouring elements. These are known as 
inline elements. Examples of inline elements are <a>, <b>, <em>, and <img>

- The <div> element allows you to group a set of elements together in one block-level box.
you might create a <div> element to contain all of the elements for the header of your site (the logo and the navigation), or you might create a <div> element to contain comments from visitors
- In a browser, the contents of the <div> element will start on a new line, but other than this it will make no difference to the presentation of the page. 
- Since there may be several other elements inside a <div>element, it can be helpful to add a comment after the closing 
</div> tag

- <span>: The <span> element acts like an inline equivalent of the <div>element. It is used to either:
1. Contain a section of text where there is no other suitable element to differentiate it from its surrounding text
2. Contain a number of inline elements

- <iframe>: An iframe is like a little window that has been cut into your page — and in that window you can see another page. The term iframe is an abbreviation of inline frame.
src: The src attribute specifies the URL of the page to show in the frame.
height: The height attribute specifies the height of the iframe in pixels.
width: The width attribute specifies the width of the iframe in pixels.

- <meta>: The <meta> element lives inside the <head> element and contains information about that web page.It is not visible to users but fulfills a number of purposes such as telling search engines about your page, who created 
it, and whether or not it is time sensitive. (If the page is time sensitive, it can be set to expire.)
- The value of the name attribute can be anything you want it to be. Some defined values for this attribute that are commonly used are:
. description: This contains a description of the page. This description is commonly used by search engines to understand what the page is about and should be a maximum of 155 characters. Sometimes it is also displayed in search engine results.
. keywords: This contains a list of commaseparated words that a user might search on to find the page. 
. robots: This indicates whether search engines should add this page to their search results or not. A value of noindex can be used if this page should not be added. A value of nofollow can be used if search engines should add this 
page in their results but not any pages that it links to.
- 'http-equiv' = values
. author: This defines the author of the web page.
. pragma: This prevents the browser from caching the page. (That is, storing it locally to save time downloading it on subsequent visits.)
. expires: Because browsers often cache the content of a page, the expires option can be used to indicate when the page 
should expire (and no longer be cached). Note that the date must be specified in the format shown

- ESCAPE CHARACTERS
<	Less-than sign: &lt; &#60; 
>	Greater-than sign: &gt; &amp;
&	Ampersand: &amp; &#38;
"	Quotation mark: &quot; &#34;
¢	Cent sign: &cent; &#162;
£	Pound sign: &pound; &#163;
¥	Yen sign: &yen; &#165;
¤	Euro sign: &euro; &#8364;
©	Copyright symbol: &copy; &#169;
®	Registered trademark: &reg; &#174;
™	Trademark: &trade; &#8482;
‘	Left single quote: &lsquo; &#8216;
'	Right single quote: &rsquo; &#8217;
“	Left double quotes: &ldquo; &#8220;
”	Right double quotes: &rdquo; &#8221; 
×	Multiplication sign: &times; &#215;
÷	Division sign: &divide; &#247;

*CHAPTER EIGHT: Video*
----------------------------------------------------------------------------------------------------
	 intro
----------------------------------------------------------------------------------------------------

- To reach as many browsers as possible, you should provide the video in the following formats:
H264: IE and Safari
WebM: Android, Chrome, 
Firefox, Opera

- <video>: The <video> element has a number of attributes which allow you to control video playback:
. src: This attribute specifies the path to the video. (The example video is in H264 format so it will only work in IE and Safari.)
. poster: This attribute allows you to specify an image to show while the video is downloading or until the user tells the video to play.
. width, height: These attributes specify the size of the player in pixels.
. controls: When used, this attribute indicates that the browser should supply its own controls for playback.
. autoplay: When used, this attribute specifies that the file should play automatically.
. loop: When used, this attribute indicates that the video should start playing again once it has ended
- preload: This attribute tells the browser what to do when the page loads. It can have one of three values: 
. none: The browser should not load the video until the user presses play.
. auto: The browser should download the video when the page loads.
. metadata: The browser should just collect information such as the size, first frame, track list, and duration

- <source>: To specify the location of the file to be played, you can use the <source> element inside the <video> element. (This should replace the src attribute on the opening <video> tag.)You can also use multiple <source> elements to specify that the video is available in different formats.
***(Due to a bug on the iPad, you should provide the MP4 video as the first format. Otherwise, it might not play.)***
- type: You should use this attribute to tell the browser what format the video is. Otherwise, it will download some of the video to see if it can play the file (which will take time and bandwidth).

- displaying audios is the same as videos
MP3: Safari 5+, Chrome 6+, IE9
Ogg Vorbis: Firefox 3.6, Chome 
6, Opera 1.5, IE9